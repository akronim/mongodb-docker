docker

nvm use 14


$ touch docker-compose.yml
$ docker-compose -f docker-compose.yml up

	Creating network "mongodb_network" with the default driver
	Creating volume "tut1_data" with default driver
	Creating mongodb       ... done
	Creating mongo-express ... done

$ docker-compose down

($ docker-compose stop / $ docker-compose start)

$ docker-compose up -d

(http://localhost:8081/)

# Mongo Shell
$ docker ps
$ docker exec -it {mongo container id} bash
root@5aac69feef04:/# mongo mongodb://localhost:27017 -u rootuser -p rootpass
(ctrl+l => clear the screen)
> show dbs;

# create a db
> use amigoscode;
> db.getName();
> db.createCollection("hello");
> db.dropDatabase();

> db.help();

# collection/table
> db.createCollection("person");
> show collections
> db.person.stats();
> db.person.drop();

> db.createCollection("person", { capped: true, size: 6142800, max: 3000 });

# another way of creating collection
> student = {
... "firstName": "John",
...     "lastName": "Doe",
...     "email": "john@sql.com",
...     "gender": "M",
...     "country": "UK",
...     "isStudentActive": false,
...     "favouriteSubjects": ["maths", "english", "it"],
...     "totalSpentInBooks": 0.00
... }
> db.student.insert(student);

> db.student.count();
> db.student.find().pretty();

# insert many
> db.student.insertMany(students);

# querying
> db.student.find({ firstName: 'Lon'  }).pretty();
> db.student.find( { firstName: 'Lon' }, { firstName: 1, lastName: 1 } ).pretty();
> db.student.find( { firstName: 'Lon' }, { firstName: 0, lastName: 0 } ).pretty();

# update
> db.student.update({ _id: ObjectId("6104517a09b144e5ac651d9b") }, { $set: { firstName: 'Mark' } });
# update + increment
> db.student.update({ _id: ObjectId("6104517a09b144e5ac651d9b") }, { $inc: { totalSpentInBooks: 999 } });

> db.student.update({ _id: ObjectId("6104517a09b144e5ac651d9b") }, { $pull: { favouriteSubjects: "Adventure|Romance" } });
> db.student.update({ _id: ObjectId("6104517a09b144e5ac651d9b") }, { $push: { favouriteSubjects: "Adventure|Romance" } });

# update many
> db.student.updateMany(...

# get rid of property
> db.student.update({ _id: ObjectId("6104517a09b144e5ac651d9b") }, { $unset: { lastName: 1 } });


# delete
> db.student.deleteOne({ _id: ObjectId("61044da209b144e5ac651d9a") });
> db.student.deleteMany( {gender: 'M' });


> db.student.find({}, { totalSpentInBooks: 1 }).limit(5).pretty();








